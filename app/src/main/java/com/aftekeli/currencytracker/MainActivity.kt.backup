package com.aftekeli.currencytracker

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.style.TextOverflow
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavDestination.Companion.hierarchy
import androidx.navigation.NavGraph.Companion.findStartDestination
import androidx.navigation.compose.currentBackStackEntryAsState
import androidx.navigation.compose.rememberNavController
import com.aftekeli.currencytracker.ui.navigation.CurrencyTrackerNavHost
import com.aftekeli.currencytracker.ui.navigation.Routes
import com.aftekeli.currencytracker.ui.theme.CurrencyTrackerTheme
import com.aftekeli.currencytracker.ui.viewmodel.AuthViewModel
import com.google.firebase.FirebaseApp
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // Initialize Firebase
        if (FirebaseApp.getApps(this).isEmpty()) {
            FirebaseApp.initializeApp(this)
        }
        
        enableEdgeToEdge()
        setContent {
            CurrencyTrackerTheme {
                CurrencyTrackerApp()
            }
        }
    }
}

@Composable
fun CurrencyTrackerApp(
    authViewModel: AuthViewModel = viewModel()
) {
    val authState by authViewModel.uiState.collectAsState()
    val navController = rememberNavController()
    val navBackStackEntry by navController.currentBackStackEntryAsState()
    val currentDestination = navBackStackEntry?.destination
    
    // Define bottom navigation items
    val bottomNavItems = listOf(
        BottomNavItem(
            route = Routes.CURRENCY_LIST,
            icon = Icons.Default.Home,
            label = "Home"
        ),
        BottomNavItem(
            route = Routes.WATCHLIST,
            icon = Icons.Default.Star,
            label = "Watchlist"
        ),
        BottomNavItem(
            route = Routes.CONVERTER,
            icon = Icons.Default.CurrencyExchange,
            label = "Converter"
        ),
        BottomNavItem(
            route = Routes.ALERTS,
            icon = Icons.Default.Notifications,
            label = "Alerts"
        ),
        BottomNavItem(
            route = Routes.PROFILE,
            icon = Icons.Default.Person,
            label = "Profil"
        )
    )
    
    // Check if current route is a detail screen or auth screen to hide bottom nav
    val currentRoute = navBackStackEntry?.destination?.route
    val isAuthScreen = currentRoute == Routes.LOGIN || currentRoute == Routes.REGISTER
    val isDetailScreen = currentRoute != null && currentRoute.contains("detail")
    val showBottomNav = !isAuthScreen && !isDetailScreen
    
    // Determine start destination based on auth state
    val startDestination = if (authState.isLoggedIn) Routes.CURRENCY_LIST else Routes.LOGIN
    
    Scaffold(
        bottomBar = {
            if (showBottomNav) {
                NavigationBar {
                    bottomNavItems.forEach { item ->
                        NavigationBarItem(
                            icon = { Icon(item.icon, contentDescription = item.label) },
                            label = { 
                                Text(
                                    text = item.label,
                                    maxLines = 1,
                                    overflow = TextOverflow.Ellipsis
                                ) 
                            },
                            selected = currentDestination?.hierarchy?.any { it.route == item.route } == true,
                            onClick = {
                                navController.navigate(item.route) {
                                    // Pop up to the start destination of the graph to
                                    // avoid building up a large stack of destinations
                                    popUpTo(navController.graph.findStartDestination().id) {
                                        saveState = true
                                    }
                                    // Avoid multiple copies of the same destination
                                    launchSingleTop = true
                                    // Restore state when reselecting a previously selected item
                                    restoreState = true
                                }
                            }
                        )
                    }
                }
            }
        }
    ) { innerPadding ->
        Surface(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding),
            color = MaterialTheme.colorScheme.background
        ) {
            CurrencyTrackerNavHost(
                navController = navController,
                startDestination = startDestination
            )
        }
    }
}

data class BottomNavItem(
    val route: String,
    val icon: ImageVector,
    val label: String
)